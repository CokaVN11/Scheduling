cout << "SJF running...\n";
int cpu_time = 0;
int resource_time = 0;
process* running_process = nullptr;
process* ready_list = nullptr;

while (!pq.empty() || running_process || ready_list)
{
    // Add new arrived processes to the ready list
    while (!pq.empty() && (pq.top().arrival <= cpu_time || pq.top().arrival <= resource_time))
    {
        process* p = new process(pq.top());
        pq.pop();
        p->next = ready_list;
        ready_list = p;
    }

    // If there are no ready processes, idle CPU and resource
    if (!ready_list)
    {
        cpu_time++;
        resource_time++;
        continue;
    }

    // Choose the process with the smallest burst time from the ready list
    process* prev = nullptr;
    process* cur = ready_list;
    process* shortest_process = cur;

    while (cur)
    {
        if (cur->cpu[0] < shortest_process->cpu[0])
        {
            shortest_process = cur;
            prev = prev;
        }

        prev = cur;
        cur = cur->next;
    }

    if (running_process && shortest_process == running_process)
    {
        // The running process still needs CPU burst time
        if (!running_process->cpu.empty())
        {
            cpu_time++;
            running_process->cpu[0]--;
            if (running_process->cpu[0] == 0)
            {
                // The running process has finished its CPU burst
                tt[running_process->id - 1] = cpu_time - running_process->arrival;
                running_process->need_cpu = false;
                running_process->arrive_time = cpu_time;
                resource_time = max(resource_time, cpu_time);
            }
        }
        else if (!running_process->resource.empty()) {
    // If there is no resource available, put the process back into the ready queue
    if (resource_available < running_process->resource[0]) {
        ready_queue.push(*running_process);
        running_process = nullptr;
        continue;
    }

    // If the process needs to wait for the resource, add it to the wait queue
    if (running_process->arrival > current_time) {
        for (int i = 0; i < running_process->arrival - current_time; ++i) {
            wait_queue.push_back(nullptr);
            gantt_chart.push_back(-1);
        }
        current_time = running_process->arrival;
    }

    // Allocate the resource to the process
    for (int i = 0; i < running_process->resource[0]; ++i) {
        wait_queue.push_back(running_process);
        gantt_chart.push_back(running_process->id);
    }
    current_time += running_process->resource[0];
    resource_available -= running_process->resource[0];
    running_process->resource.erase(running_process->resource.begin());

    // If the process is finished, calculate its waiting and turnaround times
    if (running_process->resource.empty()) {
        int wait_time = current_time - running_process->arrival - running_process->cpu_total_time;
        int turnaround_time = current_time - running_process->arrival;
        average_wait_time += wait_time;
        average_turnaround_time += turnaround_time;
        completed_processes++;
        running_process = nullptr;
    } else {
        // If the process still needs CPU time, put it back into the ready queue
        ready_queue.push(*running_process);
        running_process = nullptr;
    }
}
